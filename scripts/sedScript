#!/bin/bash
#########
# FILES #
#########
INPUT_FILE=$1
OUTPUT_FILE=$2

####################
# HELPER VARIABLES #
####################
DIGIT="\([0-9]\)"

####################
# HELPER VARIABLES #
####################
SIZE="\([0-9]\)"
CHAR="\('[a-zA-Z]'\)"
CHARTAG="\('[\n]'\)"
ZERO="0"

####################
# HELPER VARIABLES #
####################
pVar="p$DIGIT"
rVar="r$DIGIT"
iVar="i$DIGIT"
cVar="c$DIGIT"
Idx="\([0-9]\)"

####################
# HELPER VARIABLES #
####################
ASSIGN="\( *= *\)"
EQ="\( *== *\)"
NEQ="\( *!= *\)"
PLUS="\( *+ *\)"

####################
# HELPER VARIABLES #
####################
CONST_STRING="\(\"[^\"]*\"\)"

######################
# ACTUAL SED COMMAND #
######################
sed                                                                                              \
-e "s/${pVar}${ASSIGN}malloc($SIZE)/MyMalloc(p\1, \3)/g"                                         \
-e "s/${pVar}${ASSIGN}malloc($iVar)/MyMalloc(p\1,i\3)/g"                                         \
-e "s/${pVar}\[$Idx\]${ASSIGN}${CHAR}/MyWriteConstCharToStringAtConstOffset(p\1,\2,\4)/g"        \
-e "s/${pVar}\[$Idx\]${ASSIGN}${cVar}/MyWriteCharToStringAtOffset( p\1, \2,c\4)/g"               \
-e "s/${pVar}\[$Idx\]${ASSIGN}${ZERO}/MyWriteConstCharToStringAtConstOffset(p\1,\2,0)/g"         \
-e "s/${pVar}\[$iVar\]${ASSIGN}${CHAR}/MyWriteConstCharToStringAtOffset(p\1,i\2,\4)/g"           \
-e "s/${pVar}\[$iVar\]${ASSIGN}${cVar}/MyWriteCharToStringAtOffset(p\1,i\2,c\4)/g"               \
-e "s/${pVar}\[$iVar\]${ASSIGN}${ZERO}/MyWriteConstCharToStringAtOffset(p\1,i\2, 0)/g"           \
-e "s/${pVar}\[$iVar\]${EQ}${CHARTAG}/MyReadCharAndCompare(p\1,i\2,\3)/g"                        \
-e "s/${pVar}\[$Idx\]${EQ}'\\\\t'/MyReadCharAtConstOffset_Is_EQ_ToConstChar(p\1,\2,'\\\\t')/g"   \
-e "s/${pVar}\[$Idx\]${EQ}'\\\\r'/MyReadCharAtConstOffset_Is_EQ_ToConstChar(p\1,\2,'\\\\r')/g"   \
-e "s/${pVar}\[$Idx\]${EQ}'\\\\n'/MyReadCharAtConstOffset_Is_EQ_ToConstChar(p\1,\2,'\\\\n')/g"   \
-e "s/${pVar}\[$Idx\]${EQ}'\\\\0'/MyReadCharAtConstOffset_Is_EQ_ToConstChar(p\1,\2,'\\\\0')/g"   \
-e "s/${pVar}\[$Idx\]${NEQ}'\\\\t'/MyReadCharAtConstOffset_Is_NEQ_ToConstChar(p\1,\2,'\\\\t')/g" \
-e "s/${pVar}\[$Idx\]${NEQ}'\\\\r'/MyReadCharAtConstOffset_Is_NEQ_ToConstChar(p\1,\2,'\\\\r')/g" \
-e "s/${pVar}\[$Idx\]${NEQ}'\\\\n'/MyReadCharAtConstOffset_Is_NEQ_ToConstChar(p\1,\2,'\\\\n')/g" \
-e "s/${pVar}\[$Idx\]${NEQ}'\\\\0'/MyReadCharAtConstOffset_Is_NEQ_ToConstChar(p\1,\2,'\\\\0')/g" \
-e "s/'\\\\t'${EQ}${pVar}\[$Idx\]/MyReadCharAtConstOffset_Is_EQ_ToConstChar(p\2,\3,'\\\\t')/g"   \
-e "s/'\\\\r'${EQ}${pVar}\[$Idx\]/MyReadCharAtConstOffset_Is_EQ_ToConstChar(p\2,\3,'\\\\r')/g"   \
-e "s/'\\\\n'${EQ}${pVar}\[$Idx\]/MyReadCharAtConstOffset_Is_EQ_ToConstChar(p\2,\3,'\\\\n')/g"   \
-e "s/'\\\\0'${EQ}${pVar}\[$Idx\]/MyReadCharAtConstOffset_Is_EQ_ToConstChar(p\2,\3,'\\\\0')/g"   \
-e "s/'\\\\t'${NEQ}${pVar}\[$Idx\]/MyReadCharAtConstOffset_Is_NEQ_ToConstChar(p\2,\3,'\\\\t')/g" \
-e "s/'\\\\r'${NEQ}${pVar}\[$Idx\]/MyReadCharAtConstOffset_Is_NEQ_ToConstChar(p\2,\3,'\\\\r')/g" \
-e "s/'\\\\n'${NEQ}${pVar}\[$Idx\]/MyReadCharAtConstOffset_Is_NEQ_ToConstChar(p\2,\3,'\\\\n')/g" \
-e "s/'\\\\0'${NEQ}${pVar}\[$Idx\]/MyReadCharAtConstOffset_Is_NEQ_ToConstChar(p\2,\3,'\\\\0')/g" \
-e "s/${rVar}${ASSIGN}${CONST_STRING}/MyConstStringAssign(r\1,\3)/g"                             \
-e "s/${pVar}${ASSIGN}${pVar}${PLUS}${iVar}/MyStringAssignWithOffset(p\1,p\3,i\5)/g"             \
-e "s/${pVar}${ASSIGN}${pVar}${PLUS}${DIGIT}/MyStringAssignWithConstOffset(p\1,p\3,\5)/g"        \
-e "s/${cVar}${ASSIGN}${pVar}\[${DIGIT}\]/c\1 = MyReadCharFromStringAtConstOffset(p\3,\4)/g"     \
-e "s/${pVar}++/MyStringAssignWithConstOffset(p\1,p\1,1)/g"                                      \
-e "s/${pVar}${ASSIGN}${pVar}/MyStringAssignWithConstOffset(p\1,p\3,0)/g"                        \
-e "s/${pVar}${PLUS}${DIGIT}/MyStringAssignWithConstOffset(p\1,p\3,0)/g"                         \
-e "s/${pVar}/OISH_p\1/g" \
-e "s/${rVar}/OISH_r\1/g" \
-e "s/${cVar}/OISH_c\1/g" \
-e "s/${iVar}/OISH_i\1/g" \
${INPUT_FILE} > ${OUTPUT_FILE}
